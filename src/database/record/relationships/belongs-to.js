import BaseRelationship from "./base.js"
import * as inflection from "inflection"

export default class VelociousDatabaseRecordBelongsToRelationship extends BaseRelationship {
  getForeignKey() {
    if (!this.foreignKey) {
      this.foreignKey = `${inflection.underscore(this.getTargetModelClass().name)}_id`
    }

    return this.foreignKey
  }

  getInverseOf() {
    if (!this._inverseOf && !this._autoGenerateInverseOfAttempted) {
      this._autoGenerateInverseOfAttempted = true

      // Only make auto-inverse-of if the relationships name matches the target model class's name
      const targetClassSimpleName = `${this.getRelationshipName().substring(0, 1).toUpperCase()}${this.getRelationshipName().substring(1, this.getRelationshipName().length)}`

      if (targetClassSimpleName == this.getTargetModelClass().name) {
        // Only make auto-inverse-of if the expected relationship exist in a has-one or has-many form
        const targetClassRelationshipNames = this.getTargetModelClass().getRelationshipNames()
        const autoGeneratedHasOneInverseOfName = `${this.modelClass.name.substring(0, 1).toLowerCase()}${this.modelClass.name.substring(1, this.modelClass.name.length)}`
        const autoGeneratedHasManyInverseOfName = inflection.pluralize(autoGeneratedHasOneInverseOfName)

        if (targetClassRelationshipNames.includes(autoGeneratedHasOneInverseOfName)) {
          this._inverseOf = autoGeneratedHasOneInverseOfName
        } else if (targetClassRelationshipNames.includes(autoGeneratedHasManyInverseOfName)) {
          this._inverseOf = autoGeneratedHasManyInverseOfName
        }
      }
    }

    return this._inverseOf
  }
}
